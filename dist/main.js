(()=>{"use strict";(function(){const t=new Map,o=[[2,1],[1,2],[-1,2],[-2,1],[-2,-1],[-1,-2],[1,-2],[2,-1]];for(let o=0;o<8;o++)for(let n=0;n<8;n++)e=[o,n].join(","),t.has(e)||t.set(e,[]);var e,n,s;for(const e of t.keys())for(const r of o){let o=parseInt(e[0])+r[0],i=parseInt(e[2])+r[1];o>=0&&o<8&&i>=0&&i<8&&(n=e,s=[o,i].join(","),t.has(n)&&t.has(s)&&(t.get(n).includes(s)||t.get(n).push(s),t.get(s).includes(n)||t.get(s).push(n)))}return{print:()=>console.log(t),knightMoves:(o,e,n=t)=>{if(o=o.join(","),e=e.join(","),!n.has(o)||!n.has(e))return"Invalid start or end";const s=[[o]],r=new Set;for(;s.length;){const t=s.shift(),o=t[t.length-1];if(!r.has(o)){r.add(o),o===e&&(console.log(`You made it in ${t.length-1} moves! Here's your path:`),console.log(t.map((t=>t.split(",").map(Number)))));for(const e of n.get(o)){const o=[...t,e];s.push(o)}}}return null}}})().knightMoves([0,0],[5,7])})();